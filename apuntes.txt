EXPRESS AVANZADO

API REST: conjunto de definiciones y reglas. 
Aplication Programing Interface
Representational State Transfer

2 alternativas para recibir informacion : json o xml (nosotros uusaremos json)

CRUD (create, read, update, delete)

postman:
create workspace.
ponerle un nombre y 'personal'
MINUTO 01.20 EXPLICA CON EJEMPLO EL METOD POST
metodo delete minuto 01.30:
campo en el frot donde escribo info. y por otro lado tengo el boton de enviar. 
cuando ejecuto el boton de enviar aplico un post
usando e.preventDefault() <---- post
actualizacion de usuarios con metodo get 

ROUTER Y MULTER

multer: libreria que ayuda a subir archivos pdf, etc 


Los endpoints no pueden estar en el app.js
para esto vamos a usar ROUTER

min 54 : mustrea un ejemplo con statics
 min 1.15 muestra la subida de archivos (nose si es necesario para la entrega)



 //aca me traigo todo lo que estaba en app de prueba.
 //prueba, borrar luego
let users = [];

app.post("/api/users", (req, res) => {
  let user = req.body;
  if (!user.nombre || !user.apellido) {
    return res.status(400).send({
      status: "error",
      error: "faltan campos",
    });
  }
  users.push(user);

  res.send({
    status: "success",
    message: "user creado",
  });
});
app.put("/api", (req, res) => {
  res.json({
    msg: "metodo put",
  });
});
app.delete("/api", (req, res) => {
  res.json({
    msg: "metodo delete",
  });
});

const frase = "comision 50035 de coder";
//devuelve frase completa
app.get("/api/frase", (req, res) => {
  res.json({ frase });
});
//devolver una letra por la posicion indicada

app.get("/api/palabras/:pos", (req, res) => {
  const num = parseInt(req.params.pos);

  if (isNaN(num)) {
    res.status(400).json({ error: "el param no es un numero" });
  } else {
    const palabras = frase.split(" ");
    if (num < 0 || num > palabras.length) {
      res.status(400).json({ error: "esta fuera de rango" });
    } else {
      const palabra = palabras[num - 1];
      res.json({ palabra });
    }
  }
});

//termina la practica

// parte de la actividad
app.get("/products", (req, res) => {
  //Servicio para obtener productos con posibilidad de limitar la cantidad de resultados.
  const manager = new ProductManager(pathProd, pathId);
  let products = manager.getProducts();
  let limit = parseInt(req.query.limit);
  if (!isNaN(limit) && limit > 0) {
    products = products.slice(0, limit);
  }
  res.json(products);
});

app.get("/products/:idProduct", (req, res) => {
  //Servicio para obtener producto por ID
  const manager = new ProductManager(pathProd, pathId);
  let idProduct = parseInt(req.params.idProduct);
  let product = manager.getProductById(idProduct);
  if (!product) return res.send({ error: "No se encuentra el producto" });
  res.send({ product });
});

/* //ejemplo con multer(logica)
const storage = multer.diskStorage({
  destination:(req, file, cb)=>{
    cb(null, "descargas")
  },
  filename:(req, file, cb)=>{
    const timestamp = Date.now()
    const originalName = file.originalName
    const ext = path.extname(originalName)
    cb(null, `${timestamp}-${originalName}`)
  }
})
const upload = multer ({storage})

app.post("/upload", upload.single("archivo",(req, res)=>{
  res.json({msg: "archivo subido correctamente"})
})) */